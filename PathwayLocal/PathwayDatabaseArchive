%REM
	Sub DatabaseArchive
	Description: Comments for Sub
%END REM
Sub PathwayDatabaseArchive()

	%REM

	6/24/2018 - First remove older documents from the archive to keep it from expanding forever.  Keep about a year more
		than is kept in the PATHway db itself.

	6/18/2018 - At some point code was added to save the documents in an array and explicitly save them on the archive db.
	This is redundant, since the document copy method automatically performs a save.  The corresponding code has been
	commented out and can be deleted once the current code stream has been validated.

	Archive all documents more than the past 3 calendar years.
	if today is June 1, 2018.   Archive documents prior to 2015,  Keeping documents from 1/1/2015 - 6/1/2018.

	All eligible documents will be copied to the archive.
		The original copy of the doc will be flagged with a new PWarchived field.  This will
		cause it to display in the 'Pathway Archived' view.  From there they can be deleted
		once the archive process is verified to be correct.  (There's no reason to think
		the archive will not do what it says, this is just a safety check)

	%END REM

	Dim session As New NotesSession
	Dim db As NotesDatabase
	Dim dbArch As NotesDatabase
	Dim cd As NotesDocumentCollection
	Dim cdS As NotesDocumentCollection
	Dim cdF As NotesDocumentCollection
	Dim doc As NotesDocument
	Dim docArch As NotesDocument
	Dim docHold As NotesDocument
	Dim docMail As NotesDocument
	Dim docDel As NotesDocument
	Dim aDocRemove() As NotesDocument
	Dim dt As NotesDateTime
	Dim dtS As NotesDateTime
	Dim logSend As NotesLog
	Dim logSendDebug As NotesLog
	Dim logMonitor As NotesLog
	Dim aDocHold() As NotesDocument
	Dim fromName As NotesName
	Dim docProfile As NotesDocument
	Dim view As NotesView

	Dim search As String
	Dim searchReq As String
	Dim searchD As String
	Dim logText As String
	Dim folder As String
	Dim dispDate1 As String
	Dim dispDate2 As String
	Dim logAdmin As String
	Dim devAdmin As String
	Dim debug As String

	Dim removeTotal As Integer
	Dim documentCounter As Integer
	Dim vRefs As Variant
	Dim pointer As Single
	Dim bRefs As Boolean
	Dim bArchiveMemo As Boolean
	Dim bArchiveStatus As Boolean
	Dim bCommit As Boolean

	Dim reply As Variant
	Dim saved As Long
	Dim currentYear As Integer
	Dim yearCheck As Integer
	Dim searchRange As Integer
	Dim matchTarget As Integer
	Dim searchCount As Integer
	Dim cutoff As Long

	Dim dtNow As New NotesDateTime(Today)

	Const startSearch = 2200

	On Error GoTo Sub_Error

	Set db = session.CurrentDatabase

	' Refer to global profile document to turn on debugging reporting
	debug = False
	Set view = db.GetView(v_PROFILE)
	If (view.EntryCount > 0) Then
		Set docProfile = view.GetFirstDocument
		logAdmin = docProfile.Getfirstitem("Admin").Text
		devAdmin = docProfile.Getfirstitem("Operator").Text
		If (docProfile.Getfirstitem("ArchiveProcessDebug").Text = "1") Then
			debug = True
		End If
	End If

	%REM
		===============================================================================================
		The cutoff for archiving is the last three years plus the current year.
		===============================================================================================
	%END REM
	cutoff = (365 * 3) + CLng(Format$(dtNow.Dateonly, "y"))

	' Make sure the archive only happens in the production database

	If (InStr(db.Filename, "test") > 0) Then
		Error 30840, "Don't archive test database"
	Else
		bCommit = True

		If debug Then
			Set logMonitor = New NotesLog("Pathway Archive Log")
			Call logMonitor.Opennoteslog("wwbpnotesa/IBMWWBP", "Dept/Infrastructure/pathway_archive_log.nsf")
			Call logMonitor.Logaction("===============================================")
			Call logMonitor.Logaction("Start archive")
			Set logSendDebug = New NotesLog("PATHway AutoArchiver")
			Call logSendDebug.OpenMailLog(devAdmin, "PATHway Archive Report")
		End If

		Set logSend = New NotesLog("PATHway AutoArchiver")
		Call logSend.OpenMailLog(logAdmin, "PATHway Archive Report")
	End If

	' Get the current year for comparison
	currentYear = Year(dtNow.DateOnly)

	' open the archive database if COMMIT is selected
	If (bCommit) Then
		Set dbArch = New NotesDatabase(ProdServer, ArchivePath & ArchiveFile)

		' Make sure it's open before continuing
		If Not (dbArch.Isopen) Then
			If Not (dbArch.Open("", "")) Then
				Error 30850, "Failed to open archive log: " & dbArch.Filepath
			End If
		End If

		%REM
			===============================================================================================
			First cleanup the archive db, remove documents over 5 years in the past
			Example: Current date = June 1, 2018.   Remove any document created before June 1, 2013
			===============================================================================================
		%END REM

		searchReq = { (Form = "Memo" | Form = "Reply") & ( (@Adjust(@Created; 5; 0; 0; 0; 0; 0) < @Now) | (@Adjust(DisplayDate; 5; 0; 0; 0; 0; 0) < @Now) | (@Adjust(PostedDate; 5; 0; 0; 0; 0; 0) < @Now)  | (@Adjust(OriginalModTime; 5; 0; 0; 0; 0; 0) < @Now) ) }
		Set cd = dbArch.Search(searchReq, Nothing, 0)
		If (cd.Count > 0) Then
			If debug Then
				Call logMonitor.Logaction("From 5 years back, removed " & Str(cd.Count) & " email documents from archive database")
				Call logSendDebug.Logaction("Search string: '" & searchReq & "'")
				Call logSendDebug.Logaction("From 5 years back, removed " & Str(cd.Count) & " email documents from archive database")
			End If
			Call cd.Removeall(False)
		End If

		searchReq = {(Form = "PWayData" & (@Adjust(@Created; 6; 0; 0; 0; 0; 0) < @Now)) | (Form = "Resource Request" | Form = "PWayReqTemplate" | Form = "PWayIsv")}
		Set cd = dbArch.Search(searchReq, Nothing, 0)
		If (cd.Count > 0) Then
			If debug Then
				Call logMonitor.Logaction("From 6 years back, removed " & Str(cd.Count) & " request documents from archive database")
				Call logSendDebug.Logaction("Search string: '" & searchReq & "'")
				Call logSendDebug.Logaction("From 6 years back, removed " & Str(cd.Count) & " request documents from archive database")
			End If
			Call cd.Removeall(False)
		End If
	End If

	%REM
		===============================================================================================
		Inspect all documents in the db
		Search for "Return Receipt" and "Pathway Request Template" and "Notice" and "Appointment"
		Delete all
		===============================================================================================
	%END REM

	logText = "Cleaning up obsolete document types"
	search = {Form = "Return Receipt" | Form = "Pathway Request Template" | Form = "Notice"  | Form = "Appointment"}
	Set cd = db.Search(search, Nothing, 0)
	If (cd.Count > 0) Then
		Call cd.Removeall(true)
		If debug Then
			Call logMonitor.Logaction("Deleted " & Str(cd.Count) & " obsolete document types")
			Call logMonitor.Logaction("---")
		End If
	End If

	%REM
		===============================================================================================
		Inspect all mail documents in the db
		Try to find at least 300 matches, then stop the search.
		If unable to match the search count and the current cutoff date is reached, stop the search.
		===============================================================================================
	%END REM

	searchCount = 0
	matchTarget = 300
	searchRange = startSearch

	' Generate search arguments for documents more than <searchRange> days old
	search = {(Form = "Memo" | Form = "Reply") & (@Adjust(@Created; 0; 0; } & searchRange & {; 0; 0; 0) < @Now) & ! @IsAvailable(PWarchived)}

	db.FolderReferencesEnabled = True

	If debug Then
		Call logMonitor.Logaction("Searching for expired mail documents")
	End If

	Do While searchCount < matchTarget
		Set cd = db.Search(search, Nothing, 0)
		searchCount = cd.Count
		If (searchCount < matchTarget) Then
			searchRange = searchRange - 14

			If (searchRange < cutoff) Then
				If debug Then
					Call logMonitor.Logaction("Search threshold below " & CStr(cutoff) & " days, exiting search")
				End If
				Exit Do
			End If

			search = {(Form = "Memo" | Form = "Reply") & (@Adjust(@Created; 0; 0; } & searchRange & {; 0; 0; 0) < @Now) & ! @IsAvailable(PWarchived)}
		End If
		Sleep 1
	Loop

	If debug Then
		Call logMonitor.Logaction("Matched mail document count " & Str(cd.Count))
		Call logSendDebug.Logaction("Matched mail document count " & Str(cd.Count))
	End If

	%REM
		===============================================================================================
		Inspect all request documents in the db
		Try to find at least 100 matches, then stop the search.
		If unable to match the search count and the current cutoff date is reached, stop the search.
		===============================================================================================
	%END REM
	searchCount = 0
	matchTarget = 100
	searchRange = startSearch

	' Generate search arguments for documents more than <searchRange> days old
	searchReq = {(Form = "PWayData") & (@Adjust(@Created; 0; 0; } & searchRange & {; 0; 0; 0) < @Now) & ! @IsAvailable(PWarchived)}

	If debug Then
		Call logMonitor.Logaction("Searching for expired request documents")
	End If

	Do While searchCount < matchTarget
		Set cdS = db.Search(searchReq, Nothing, 0)
		searchCount = cdS.Count
		If (searchCount < matchTarget) Then
			searchRange = searchRange - 14

			If (searchRange < cutoff) Then
				If debug Then
					Call logMonitor.Logaction("Search threshold below " & CStr(cutoff) & " days, exiting search")
				End If
				Exit Do
			End If

			searchReq = {(Form = "PWayData") & (@Adjust(@Created; 0; 0; } & searchRange & {; 0; 0; 0) < @Now) & ! @IsAvailable(PWarchived)}
		End If
	Loop

	If debug Then
		Call logMonitor.Logaction("Matched request document count " & Str(cdS.Count))
		Call logSendDebug.Logaction("Matched request document count " & Str(cdS.Count))
	End If


	%REM
		===============================================================================================
		Initialize document array and logging streams
		===============================================================================================
	%END REM

	' preallocate array of documents to be archived
	searchCount = cd.Count + cdS.Count
	ReDim Preserve aDocRemove(searchCount - 1)

	removeTotal = -1
	documentCounter = 0

	' update admin log
	Call logSend.LogAction("Final Memo Criteria: " & search)
	Call logSend.LogAction("Final Status Criteria: " & searchReq)
	Call logSend.LogAction(cd.Count & " mail documents to be archived, " & cdS.Count & " request documents to be archived")

	' update monitoring log
	If debug Then
		Call logMonitor.LogAction("Final Memo Criteria: " & search)
		Call logMonitor.LogAction("Final Status Criteria: " & searchReq)
		Call logMonitor.LogAction(cd.Count & " mail documents to be archived, " & cdS.Count & " request documents to be archived")
	End If

	Call logSend.LogAction("After completion check the Archived folder for the documents that were moved.  Once you are confident that they exist in the Archive database they can be deleted from the Archive folder to complete the cleanup operation.")

	If debug Then
		Call logMonitor.LogAction("=================================================")
		Call logMonitor.LogAction("1. Copying " & cd.Count & " mail docs")
	End If

	Call logSend.LogAction("1. Copying " & cd.Count & " mail docs")

	%REM
		===============================================================================================
		Process retrieved mail documents
		===============================================================================================
	%END REM

	Set doc = cd.GetFirstDocument
	Do Until doc Is Nothing
		' now archive
		removeTotal = removeTotal + 1
		documentCounter = documentCounter + 1

		' Extract name for logging entry
		Set fromName = New NotesName(doc.GetItemValue("From")(0))

		' copy selected document to archive db
		Set docArch = doc.CopyToDatabase(dbArch)

		logText = documentCounter & ".  '" & Left$(doc.Subject(0), 40) & "',  Memo created " & Format$(doc.Created, "mm/dd/yyyy hh:nn:ss AM/PM") & " from " & fromName.Common

		' oddly. some documents don't have the FolderReferences property, and there doesn't seem to
		' be a way to verify the existence of a property.  so set up a special error handler for this section
		On Error GoTo Sub_ErrorFolders

		' try to add new document to all folders if it was email
		bRefs = False

		vRefs = doc.FolderReferences
		If (IsArray(vRefs)) Then
			ForAll fld In vRefs
				If (Len(fld) > 0) Then
					If (bCommit) Then
						folder = fld
						Call docArch.PutInFolder(fld, True)
					End If

					If debug Then
						Call logMonitor.LogAction(logText & " => in folder " & fld)
					End If

					bRefs = True
				End If
			End ForAll
		End If

UseInbox:
		' if no valid folder was found, just put it in the Inbox
		folder = "Inbox"
		If (Not bRefs) Then
			Call docArch.PutInFolder("($Inbox)")

			If debug Then
				Call logMonitor.LogAction(logText & " => in the Inbox")
			End If
		End If

NoFolders:
		On Error GoTo Sub_Error

		' place doc on the commit queue
		Set aDocRemove(removeTotal) = doc
		saved = saved + doc.Size

		Set doc = cd.GetNextDocument(doc)
	Loop

	%REM
		===============================================================================================
		Process collection of status docs
		===============================================================================================
	%END REM

	If debug Then
		Call logMonitor.LogAction("---")
		Call logMonitor.LogAction("2. Copying " & cdS.Count & " status docs to the archive")
	End If

	Call logSend.LogAction("2. Copying " & cdS.Count & " status docs to the archive")
	documentCounter = 0
	Set doc = cdS.GetFirstDocument
	Do Until doc Is Nothing
		' only archive Status documents from selected past year
		Set dt = doc.GetFirstItem("PWayNeeded").DateTimeValue

		removeTotal = removeTotal + 1
		documentCounter = documentCounter + 1

		' create new doc copy in archive db
		Set docArch = doc.CopyToDatabase(dbArch)

		dispDate1 = Format$(doc.Created, "mm/dd/yyyy hh:nn:ss AM/PM")
		dispDate2 = Format$(doc.GetFirstItem("PWayNeeded").Text, "mm/dd/yyyy hh:nn:ss AM/PM")

		If debug Then
			Call logMonitor.LogAction("  " & documentCounter & ".  '" & doc.PWayId(0) & "' Created " & dispdate1 & ", Engagement date " & dispDate2)
		End If

		' place doc on the commit queues
		Set aDocRemove(removeTotal) = doc

		saved = saved + doc.Size

		' get next doc
		Set doc = cdS.GetNextDocument(doc)
	Loop

	%REM
		===============================================================================================
		Now flag the archived documents to prevent re-archival
		===============================================================================================
	%END REM
	If (bCommit) Then
		If debug Then
			Call logMonitor.LogAction(" ")
			Call logMonitor.LogAction("Flagging archived documents to prevent re-archival")
		End If

		For documentCounter = 0 To UBound(aDocRemove)
			Set doc = aDocRemove(documentCounter)
			If Not (doc Is Nothing) Then
				Call doc.ReplaceItemValue("PWarchived", "1")
				Call doc.save(False, False)
			End If
		Next

		If debug Then
			Call logMonitor.LogAction(" ")
			Call logMonitor.LogAction("Finished, saved bytes: " & CStr(saved))
		End If
	End If

Sub_Exit:

	' Only log if running on production db
	If (bCommit) Then
		Call logSend.LogAction("Saved bytes: " & CStr(saved))
		Call logSend.Close
	End If

	Exit Sub

Sub_Error:

	If (logSendDebug Is Nothing) Then
		Set logSendDebug = New NotesLog("PATHway AutoArchiver")
		Call logSendDebug.OpenMailLog(devAdmin, "PATHway Archive Report")
	End If

	' Running on test db, just exit
	If (Err = 30840) Then
		Resume Sub_Exit
	End If

	Call logSendDebug.Logerror(Err, documentCounter & ". [A]:   '" & Error & "' on line " & Erl & ": " & logText)

	Resume Sub_Exit

Sub_ErrorFolders:

	If (logSendDebug Is Nothing) Then
		Set logSendDebug = New NotesLog("PATHway AutoArchiver")
		Call logSendDebug.OpenMailLog(devAdmin, "PATHway Archive Report")
	End If

	Call logSendDebug.Logerror(Err, documentCounter & ". [C]:   '" & Error & "' on line " & Erl & ": " & logText)

	If (Err = 1028 Or Err = 4005 Or Err = 17412) Then
		If (folder = "Inbox") Then
			Resume NoFolders
		Else
			Resume UseInbox
		End If
	End If

	Resume Sub_Exit

End Sub
